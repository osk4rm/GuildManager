@inject IClassService _classService
@inject IStatsService _statsService
@inject INotificationHelper _notifications
@inject IRaidEventService _raidEventService
@inject NavigationManager _navManager

@if (!IsLoaded)
{
    <div class="lds-ellipsis"><div></div><div></div><div></div><div></div></div>
}
else
{
    <div class="control-section overflow-hidden">
        <SfDashboardLayout Columns="8" AllowDragging="false">
            <DashboardLayoutPanels>
                <DashboardLayoutPanel Column="0" Row="0" SizeX="2" SizeY="1">
                    <ContentTemplate>
                        <div class="root-container" @onclick="(()=>_navManager.NavigateTo(MembersUrl))">
                                <div class="item-container income">
                                    <p>@GuildMembers</p>
                                </div>
                                <div class="bottom-container">
                                    <p>Guild members <i class="fa-solid fa-user"></i></p>
                                </div>
                            </div>
                    </ContentTemplate>
                </DashboardLayoutPanel>
                <DashboardLayoutPanel Column="2" Row="0" SizeX="2" SizeY="1">
                    <ContentTemplate>
                        <div class="root-container" @onclick="(()=>_navManager.NavigateTo(RaidEventsUrl))">
                            <div class="item-container expense">
                                <p>@RaidsThisWeek</p>
                            </div>
                            <div class="bottom-container">
                                <p>Raids this week <i class="fa-solid fa-headphones"></i></p>
                            </div>
                        </div>
                    </ContentTemplate>
                </DashboardLayoutPanel>
                <DashboardLayoutPanel Column="4" Row="0" SizeX="2" SizeY="1">
                    <ContentTemplate>
                        <div class="root-container" @onclick="(()=>_navManager.NavigateTo(PendingInvitesUrl))">
                            <div class="item-container balance">
                                <p>@PendingInvites</p>
                            </div>
                            <div class="bottom-container">
                                <p>Pending invites <i class="fa-solid fa-bell"></i></p>
                            </div>
                        </div>
                    </ContentTemplate>
                </DashboardLayoutPanel>
                <DashboardLayoutPanel Column="6" Row="0" SizeX="2" SizeY="1">
                    <ContentTemplate>
                        <div class="root-container" @onclick="(()=>NavigateToRaidEvent(UpcomingEvent.Id))">
                            <div class="item-container upcoming">
                                <p>@UpcomingEvent.RaidLocation.Name <br /> @UpcomingEvent.StartDate.ToString("dd-MM-yyyy HH:mm")</p>
                            </div>
                            <div class="bottom-container">
                                <p>Your next event <i class="fa-regular fa-calendar"></i></p>
                            </div>
                        </div>
                    </ContentTemplate>
                </DashboardLayoutPanel>
                <DashboardLayoutPanel Column="0" Row="1" SizeX="4" SizeY="2">
                    <HeaderTemplate>
                        <span class="title">Class Distribution</span>
                    </HeaderTemplate>
                    <ContentTemplate>
                        <div class="chart-container">
                            <SfAccumulationChart EnableAnimation="true" EnableBorderOnMouseMove="false"
                                             EnableSmartLabels="true" Background="transparent">
                                <AccumulationChartBorder Color="transparent"></AccumulationChartBorder>
                                <AccumulationChartTooltipSettings Enable="true" Format="${point.x}">
                                    <AccumulationChartTooltipTextStyle Color="white" Size="10"></AccumulationChartTooltipTextStyle>
                                </AccumulationChartTooltipSettings>
                                <AccumulationChartSeriesCollection>
                                    <AccumulationChartSeries DataSource="@ClassCountData" XName="Name" YName="Count" InnerRadius="40%">
                                        <AccumulationChartSeriesBorder Width="3"></AccumulationChartSeriesBorder>
                                        <AccumulationDataLabelSettings Visible="true" Name="TextMapping" Position="AccumulationLabelPosition.Outside">
                                            <AccumulationChartDataLabelFont Color="white" Size="20"></AccumulationChartDataLabelFont>
                                            <AccumulationChartConnector Length="10px" Type="ConnectorType.Curve"></AccumulationChartConnector>
                                        </AccumulationDataLabelSettings>
                                    </AccumulationChartSeries>
                                </AccumulationChartSeriesCollection>
                                <AccumulationChartLegendSettings Visible="true">
                                    <AccumulationChartLegendFont Color="white"></AccumulationChartLegendFont>
                                </AccumulationChartLegendSettings>
                            </SfAccumulationChart>
                        </div>

                    </ContentTemplate>
                </DashboardLayoutPanel>
                <DashboardLayoutPanel Column="4" Row="1" SizeX="4" SizeY="2">
                    <HeaderTemplate>
                        <span class="title">Roles Distribution</span>
                    </HeaderTemplate>
                    <ContentTemplate>
                        <div class="chart-container">
                            <SfAccumulationChart EnableAnimation="true" EnableBorderOnMouseMove="false" EnableSmartLabels="true" Background="transparent">
                                <AccumulationChartBorder Color="transparent"></AccumulationChartBorder>
                                <AccumulationChartTooltipSettings Enable="true" Format="${point.x}">
                                    <AccumulationChartTooltipTextStyle Color="white" Size="10"></AccumulationChartTooltipTextStyle>
                                </AccumulationChartTooltipSettings>
                                <AccumulationChartSeriesCollection>
                                    <AccumulationChartSeries DataSource="@RoleCountData" XName="Role" YName="RoleCount" InnerRadius="40%">
                                        <AccumulationChartSeriesBorder Width="3"></AccumulationChartSeriesBorder>
                                        <AccumulationDataLabelSettings Visible="true" Name="TextMapping" Position="AccumulationLabelPosition.Outside">
                                            <AccumulationChartDataLabelFont Color="white" Size="20"></AccumulationChartDataLabelFont>
                                            <AccumulationChartConnector Length="10px" Type="ConnectorType.Curve"></AccumulationChartConnector>
                                        </AccumulationDataLabelSettings>
                                    </AccumulationChartSeries>
                                </AccumulationChartSeriesCollection>
                                <AccumulationChartLegendSettings Visible="true">
                                    <AccumulationChartLegendFont Color="white"></AccumulationChartLegendFont>
                                </AccumulationChartLegendSettings>
                            </SfAccumulationChart>
                        </div>
                    </ContentTemplate>
                </DashboardLayoutPanel>
                <DashboardLayoutPanel Column="0" Row="4" SizeX="8" SizeY="2">
                    <HeaderTemplate>
                        <span class="title">Upcoming Raids</span>
                    </HeaderTemplate>
                    <ContentTemplate>
                        <DashEvents />
                    </ContentTemplate>
                </DashboardLayoutPanel>
            </DashboardLayoutPanels>
        </SfDashboardLayout>
    </div>


}


@code {
    public SfDashboardLayout dashboardObject { get; set; }
    private bool IsLoaded { get; set; } = false;
    List<ClassCountDto> ClassCountData { get; set; } = new();
    List<RoleCountDto> RoleCountData { get; set; } = new();
    public int? GuildMembers { get; set; }
    public int? RaidsThisWeek { get; set; }
    public int? PendingInvites { get; set; }
    public RaidEventDto UpcomingEvent { get; set; } = new();
    private string thisWeeksFilter = string.Empty;
    private string PendingInvitesUrl => "/user-panel/raid-invites";
    private string RaidEventsUrl => $"/raid-events/{thisWeeksFilter}";
    private string MembersUrl => "/members";


    protected override async Task OnInitializedAsync()
    {
        IsLoaded = false;
        thisWeeksFilter = CalculateThisWeekFilter();
        await LoadData();
        StateHasChanged();
    }

    private async Task LoadData()
    {
        IsLoaded = false;

        ClassCountData = await GetDataAsync(_classService.GetClassCount());
        RoleCountData = await GetDataAsync(_classService.GetRoleCount());
        GuildMembers = await GetDataAsync(_statsService.GetGuildMembersCount());
        RaidsThisWeek = await GetDataAsync(_statsService.GetRaidsThisWeekCount());
        PendingInvites = await GetDataAsync(_statsService.GetPendingInvitesCount());
        UpcomingEvent = await GetDataAsync(_statsService.GetUpcomingEvent());

        IsLoaded = true;
    }

    private async Task<T> GetDataAsync<T>(Task<ServiceResponse<T>> serviceCall)
    {
        var result = await serviceCall;

        if (!result.Success)
        {
            await _notifications.ShowErrorNotification(result.Message);
        }

        return result.Data;
    }

    private void NavigateToRaidEvent(int id)
    {
        _navManager.NavigateTo($"/raid-events/{id}");
    }

    private string CalculateThisWeekFilter()
    {
        var now = DateTime.Now;
        var daysUntilWednesday = ((int)DayOfWeek.Wednesday - (int)now.DayOfWeek + 7) % 7;
        var startOfWeek = now.AddDays(daysUntilWednesday - 7).Date;
        var endOfWeek = startOfWeek.AddDays(7).Date;

        return $"StartDate>{startOfWeek.ToString("yyyy-MM-dd")},StartDate<{endOfWeek.ToString("yyyy-MM-dd")}";
    }

}
