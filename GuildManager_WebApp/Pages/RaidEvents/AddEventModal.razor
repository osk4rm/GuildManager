@inject IExpansionsLocationsService _locService;
<div class="modal fade show text-black" id="myModal" style="display:block; background-color: rgba(10,10,10,.8);" aria-modal="true" role="dialog">
    <div class="modal-dialog">
        <div class="modal-content">
            <div class="modal-header">
                <h4 class="modal-title">Create new raid event</h4>
                <button type="button" class="close" @onclick="@ModalClose">&times;</button>
            </div>
            <EditForm Model="@UpsertRaidEventDto" OnValidSubmit="@AddRaidEvent">
                <div class="form-group">
                    <label for="RaidLocationId">Raid Location</label>
                    <select id="RaidLocationId" @bind="UpsertRaidEventDto.RaidLocationId">
                        <option value=""></option>
                        @foreach (var location in RaidLocations)
                        {
                            <option value="@location.Id">@location.Name</option>
                        }
                    </select>
                    <ValidationMessage For="@(() => UpsertRaidEventDto.RaidLocationId)" />
                </div>
                <div class="form-group">
                    <label for="StartDate">Start Date</label>
                    <InputDate id="StartDate" @bind-Value="UpsertRaidEventDto.StartDate" />
                    <ValidationMessage For="@(() => UpsertRaidEventDto.StartDate)" />
                </div>
                <div class="form-group">
                    <label for="EndDate">End Date</label>
                    <InputDate id="EndDate" @bind-Value="UpsertRaidEventDto.EndDate" />
                    <ValidationMessage For="@(() => UpsertRaidEventDto.EndDate)" />
                </div>
                <div class="form-group">
                    <label for="Description">Description</label>
                    <InputText id="Description" @bind-Value="UpsertRaidEventDto.Description" />
                </div>
                <div class="form-group">
                    <label for="AutoAccept">Auto Accept</label>
                    <InputCheckbox id="AutoAccept" @bind-Value="UpsertRaidEventDto.AutoAccept" />
                </div>
                <div class="form-group">
                    <label for="RaidDifficulty">Raid Difficulty</label>
                    <select id="RaidDifficulty" @bind="UpsertRaidEventDto.RaidDifficulty">
                        <option value=""></option>
                        @foreach (var difficulty in Enum.GetValues(typeof(RaidDifficulty)))
                        {
                            <option value="@difficulty">@difficulty</option>
                        }
                    </select>
                    <ValidationMessage For="@(() => UpsertRaidEventDto.RaidDifficulty)" />
                </div>
                <div class="modal-footer">
                    <button type="button" class="btn" @onclick="@OnCancel">Cancel</button>
                    <button type="submit" class="btn btn-primary">Save</button>
                </div>
            </EditForm>
        </div>
    </div>
</div>

@code {
    [Parameter]
    public EventCallback<UpsertRaidEventDto> OnAdd { get; set; }
    [Parameter]
    public EventCallback OnCancel { get; set; }
    private int SelectedExpansionId { get; set; }
    public List<RaidExpansionDto> Expansions { get; set; }
    public List<RaidLocationDto> RaidLocations { get; set; }
    public UpsertRaidEventDto UpsertRaidEventDto { get; set; } = new UpsertRaidEventDto();
    private Task ModalClose()
    {
        return OnCancel.InvokeAsync();
    }
    private Task AddRaidEvent()
    {
        return OnAdd.InvokeAsync(UpsertRaidEventDto);
    }

    protected override async Task OnInitializedAsync()
    {
        var getRaidLocs = await _locService.GetAllLocations();
        if (!getRaidLocs.Success)
        {
            //todo error handling
        }

        RaidLocations = getRaidLocs.Data;

    }


}
