@inject IRaidEventService _raidEventService
@inject IJSRuntime _jsRuntime

<table class="table table-sm table-responsive table-hover table-bordered table-dark mt-3">
    <thead class="table-primary">
        <tr>
            <th scope="col" colspan="3">Character</th>
            <th scope="col">Item level</th>
            @if (UserId == RaidEvent.LeaderId)
            {
                <th scope="col"></th>
            }

        </tr>
    </thead>
    <tbody>
        <tr>
            <td colspan="5" class="bg-danger no-hover">Tanks</td>
        </tr>
        @*NEED TO DO SEPARATE COMPONENT FOR THIS*@
        @foreach (var participant in Participants.Where(p => (p.Character.MainSpec.Role == GuildManager_DataAccess.Entities.Characters.Enum.ClassSpecializationRole.Tank)
        && p.AcceptanceStatus == AcceptanceStatus.Accepted))
        {
            <tr class="text-white">
                @if (UserId == participant.Character.UserId)
                {
                <td>
                    <div class="d-flex justify-content-center">
                        <div class="me-2">@participant.Character.Name</div>
                        <i class="fa-solid fa-xmark" @onclick="()=>OpenCancelApplicationDialogOpen(participant.CharacterId)"></i>
                    </div>
                    </td>
                }
                else
                {
                    <td>@participant.Character.Name</td>
                }
                
                <td class="imagecell"><img class="img-fluid" src="/img/classes/@participant.Character.Class.ImageUrl" alt="img" /></td>
                <td class="imagecell"><img class="img-fluid" src="/img/specs/@participant.Character.MainSpec.ImageUrl" alt="img" /></td>
                <td>@participant.Character.ItemLevel</td>
                @if (UserId == RaidEvent.LeaderId)
                {
                    @if (UserId != participant.Character.UserId)
                    {
                        <td><i class="fa-solid fa-xmark" @onclick="()=>OpenAcceptDialog(participant.CharacterId, AcceptanceStatus.Rejected)"></i></td>
                    }
                    else
                    {
                        <td><i class="fa-solid fa-xmark" @onclick="()=>OpenCancelApplicationDialogOpen(participant.CharacterId)"></i></td>
                    }
                }

            </tr>
        }
        <tr>
            <td colspan="6" class="bg-success no-hover">Healers</td>
        </tr>
        @foreach (var participant in Participants.Where(p => (p.Character.MainSpec.Role == GuildManager_DataAccess.Entities.Characters.Enum.ClassSpecializationRole.Healer)
        && p.AcceptanceStatus == AcceptanceStatus.Accepted))
        {
            <tr class="text-white">
                <td>@participant.Character.Name</td>
                <td class="imagecell"><img class="img-fluid" src="/img/classes/@participant.Character.Class.ImageUrl" alt="img" /></td>
                <td class="imagecell"><img class="img-fluid" src="/img/specs/@participant.Character.MainSpec.ImageUrl" alt="img" /></td>
                <td>@participant.Character.ItemLevel</td>
                @if (UserId == RaidEvent.LeaderId)
                {
                    @if (UserId != participant.Character.UserId)
                    {
                        <td><i class="fa-solid fa-xmark" @onclick="()=>OpenAcceptDialog(participant.CharacterId, AcceptanceStatus.Rejected)"></i></td>
                    }
                    else
                    {
                        <td><i class="fa-solid fa-xmark" @onclick="()=>OpenCancelApplicationDialogOpen(participant.CharacterId)"></i></td>
                    }
                }

                else if (UserId == participant.Character.UserId)
                {
                    <td>
                        <div class="col">
                            <i class="fa-solid fa-xmark" @onclick="()=>OpenCancelApplicationDialogOpen(participant.CharacterId)"></i>
                        </div>
                    </td>
                }
            </tr>
        }

        <tr>
            <td colspan="6" class="bg-warning no-hover">DPS</td>
        </tr>
        @foreach (var participant in Participants.Where(p => (p.Character.MainSpec.Role == GuildManager_DataAccess.Entities.Characters.Enum.ClassSpecializationRole.Melee_DPS
        || p.Character.MainSpec.Role == GuildManager_DataAccess.Entities.Characters.Enum.ClassSpecializationRole.Ranged_DPS) && p.AcceptanceStatus == AcceptanceStatus.Accepted))
        {
            <tr class="text-white">
                <td>@participant.Character.Name</td>
                <td class="imagecell"><img class="img-fluid" src="/img/classes/@participant.Character.Class.ImageUrl" alt="img" /></td>
                <td class="imagecell"><img class="img-fluid" src="/img/specs/@participant.Character.MainSpec.ImageUrl" alt="img" /></td>
                <td>@participant.Character.ItemLevel</td>
                @if (UserId == RaidEvent.LeaderId)
                {
                    @if(UserId != participant.Character.UserId)
                    {
                        <td><i class="fa-solid fa-xmark" @onclick="()=>OpenAcceptDialog(participant.CharacterId, AcceptanceStatus.Rejected)"></i></td>
                    }
                    else
                    {
                        <td><i class="fa-solid fa-xmark" @onclick="()=>OpenCancelApplicationDialogOpen(participant.CharacterId)"></i></td>
                    }
                }

                else if (UserId == participant.Character.UserId)
                {
                    <td>
                        <div class="col">
                            <i class="fa-solid fa-xmark" @onclick="()=>OpenCancelApplicationDialogOpen(participant.CharacterId)"></i>
                        </div>
                    </td>
                }
            </tr>
        }

        <tr>
            <td colspan="6" class="bg-secondary no-hover">Pending</td>
        </tr>
        @foreach (var participant in Participants.Where(p => p.AcceptanceStatus == AcceptanceStatus.Waiting))
        {
            <tr class="text-white">
                
                <td>@participant.Character.Name</td>
                <td class="imagecell"><img class="img-fluid" src="/img/classes/@participant.Character.Class.ImageUrl" alt="img" /></td>
                <td class="imagecell"><img class="img-fluid" src="/img/specs/@participant.Character.MainSpec.ImageUrl" alt="img" /></td>
                <td>@participant.Character.ItemLevel</td>
                @if (UserId == RaidEvent.LeaderId)
                {
                    <td>
                        <div class="col">
                            <i class="fa-solid fa-check" @onclick="()=>OpenAcceptDialog(participant.CharacterId, AcceptanceStatus.Accepted)"></i>
                            @if (UserId != participant.Character.UserId)
                            {
                                <i class="fa-solid fa-xmark" @onclick="()=>OpenAcceptDialog(participant.CharacterId, AcceptanceStatus.Rejected)"></i>
                            }
                            else
                            {
                                <i class="fa-solid fa-xmark" @onclick="()=>OpenCancelApplicationDialogOpen(participant.CharacterId)"></i>
                            }

                        </div>
                    </td>
                }

                
            </tr>
        }


    </tbody>

</table>
@if (AcceptDialogOpen)
{
    <ConfirmationDialog DialogType="ConfirmationDialog.ModalDialogType.OkCancel" OnClose="UpdateCharacterStatus"
                    Text="Are you sure?" Title="Confirm operation"></ConfirmationDialog>
}

@if (CancelApplicationDialogOpen)
{
    <ConfirmationDialog DialogType="ConfirmationDialog.ModalDialogType.OkCancel" OnClose="CancelApplicationForEvent"
                    Text="Are you sure?" Title="Confirm operation"></ConfirmationDialog>
}


@code {
    [CascadingParameter(Name = "UserId")]
    public int UserId { get; set; }
    [CascadingParameter(Name = "User")]
    public ClaimsPrincipal User { get; set; } = new();
    [CascadingParameter(Name = "RaidEvent")]
    public RaidEventDto RaidEvent { get; set; } = new();
    [Parameter]
    public List<RaidEventCharacterDto> Participants { get; set; } = new();
    public bool AcceptDialogOpen { get; set; } = false;
    public bool CancelApplicationDialogOpen { get; set; } = false;
    private int charIdToUpdateStatus;
    private AcceptanceStatus _statusToApply;

    [Parameter]
    public EventCallback CharacterStatusUpdated { get; set; }

    private async Task UpdateCharacterStatus(bool accepted)
    {
        if (accepted)
        {
            var updateResult = await _raidEventService.UpdateCharacterAcceptanceStatus(new UpdateRaidEventCharacterDto
                {
                    CharacterId = charIdToUpdateStatus,
                    RaidEventId = RaidEvent.Id,
                    AcceptanceStatus = _statusToApply
                });

            if (!updateResult.Success)
            {
                //todo error
            }

            await CharacterStatusUpdated.InvokeAsync();
        }

        AcceptDialogOpen = false;
    }

    private void OpenAcceptDialog(int charId, AcceptanceStatus status)
    {
        charIdToUpdateStatus = charId;
        _statusToApply = status;

        AcceptDialogOpen = true;
        StateHasChanged();
    }

    private async Task CancelApplicationForEvent(bool accepted)
    {
        if (accepted)
        {
            var cancelApplicationResult =
                await _raidEventService.CancelApplicationForRaidEvent(RaidEvent.Id, charIdToUpdateStatus);

            if (!cancelApplicationResult.Success)
            {
                await _jsRuntime.InvokeVoidAsync("ShowNotification", "error", cancelApplicationResult.Message);
                return;
            }
            await _jsRuntime.InvokeVoidAsync("ShowNotification", "success", cancelApplicationResult.Message);
            await CharacterStatusUpdated.InvokeAsync();
        }
        CancelApplicationDialogOpen = false;
    }

    private void OpenCancelApplicationDialogOpen(int charId)
    {
        charIdToUpdateStatus = charId;

        CancelApplicationDialogOpen = true;
        StateHasChanged();
    }
}