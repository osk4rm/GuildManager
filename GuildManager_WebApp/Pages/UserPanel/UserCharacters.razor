@using GuildManager_DataAccess.Entities;
@inject IClassService ClassService
@inject ICharacterService CharacterService

<h1 class="mt-3">Your characters</h1>

@if (IsLoading)
{
    <div class="lds-ellipsis"><div></div><div></div><div></div><div></div></div>
}
else
{
    <div class="container w-75">
        <SfGrid @ref="characterGrid" DataSource="@Characters" AllowPaging="true"
            Toolbar="@(new List<string>{"Add"})">
            <GridEditSettings AllowAdding="true" AllowDeleting="true" AllowEditing="true" Mode="EditMode.Dialog" Dialog="DialogParams" ShowDeleteConfirmDialog="true">
                <Template>
                    @{
                        var charDto = (context as CharacterDto);
                        <CharactersDialog charDto="charDto" CharacterClasses="CharacterClasses" ClassSpecializations="ClassSpecializations"></CharactersDialog>
                    }

                </Template>
            </GridEditSettings>
            <GridEvents OnActionBegin="ActionHandler" TValue="CharacterDto"></GridEvents>
            <GridColumns>
                <GridColumn Field="@nameof(CharacterDto.Name)" HeaderText="Nickname" TextAlign="TextAlign.Center"></GridColumn>
                <GridColumn Field="Class.Name" HeaderText="Class" TextAlign="TextAlign.Center"></GridColumn>
                <GridColumn Field="MainSpec.Name" HeaderText="Main spec" TextAlign="TextAlign.Center"></GridColumn>
                <GridColumn Field=@nameof(CharacterDto.ItemLevel) TextAlign="TextAlign.Center"></GridColumn>
                <GridColumn HeaderText="Manage Records" Width="150">
                    <GridCommandColumns>
                        <GridCommandColumn Type="CommandButtonType.Edit" ButtonOption="@(new CommandButtonOptions() {IconCss="e-icons e-edit", CssClass="e-flat" })"></GridCommandColumn>
                        <GridCommandColumn Type="CommandButtonType.Delete" ButtonOption="@(new CommandButtonOptions() {IconCss="e-icons e-delete", CssClass="e-flat" })"></GridCommandColumn>
                        <GridCommandColumn Type="CommandButtonType.Save" ButtonOption="@(new CommandButtonOptions() {IconCss="e-icons e-save", CssClass="e-flat" })"></GridCommandColumn>
                        <GridCommandColumn Type="CommandButtonType.Cancel" ButtonOption="@(new CommandButtonOptions() {IconCss="e-icons e-cancel-icon", CssClass="e-flat" })"></GridCommandColumn>
                    </GridCommandColumns>
                </GridColumn>
            </GridColumns>
        </SfGrid>
        <div class="mt-2">
            <p class="alert @alertCss">@responseMsg</p>
        </div>
    </div>
}




@code {
    CreateCharacterDto CreateCharacterDto = new();

    List<CharacterDto> Characters = new();
    List<CharacterClass> CharacterClasses = new();
    List<ClassSpecialization> ClassSpecializations = new();
    public SfGrid<CharacterDto> characterGrid;
    private DialogSettings DialogParams = new DialogSettings { MinHeight = "400px", Width = "450px" };
    public bool EnableSpecsDropDown = false;
    string responseMsg = string.Empty;
    string createCharacterMessage = string.Empty;
    string alertCss = string.Empty;
    public bool IsLoading { get; set; } = false;

    protected override async Task OnInitializedAsync()
    {
        IsLoading = true;
        var classesResponse = await ClassService.GetClasses();
        if (!classesResponse.Success)
        {
            responseMsg = classesResponse.Message;
            alertCss = "alert-danger";
        }
        else
        {
            CharacterClasses = classesResponse.Data;
            foreach (var ctr in CharacterClasses)
            {
                ClassSpecializations.AddRange(ctr.ClassSpecializations);
            }
        }

        var charactersResponse = await CharacterService.GetUserCharacters();
        if (!charactersResponse.Success)
        {
            responseMsg = charactersResponse.Message;
        }
        else
        {
            Characters = charactersResponse.Data;
        }
        IsLoading = false;
    }
    public async void ActionHandler(ActionEventArgs<CharacterDto> args)
    {
        if (args.RequestType.Equals(Syncfusion.Blazor.Grids.Action.Save))
        {
            if (args.Action == "Add")
            {
                CreateCharacterDto.Name = args.Data.Name;
                CreateCharacterDto.ClassId = args.Data.Class.Id;
                CreateCharacterDto.ClassSpecializationId = args.Data.MainSpec.Id;
                CreateCharacterDto.ItemLevel = args.Data.ItemLevel;
                var result = await CharacterService.CreateCharacter(CreateCharacterDto);
                var getCharsResponse = await CharacterService.GetUserCharacters();
                if (!result.Success)
                {
                    responseMsg = result.Message;
                    alertCss = "alert-danger";

                    Characters = getCharsResponse.Data;
                    await characterGrid.Refresh();

                    StateHasChanged();
                    await Task.Delay(5000);
                    responseMsg = string.Empty;
                    alertCss = string.Empty;
                    StateHasChanged();

                    return;
                }

                responseMsg = "Character created!";
                alertCss = "alert-success";

                Characters = getCharsResponse.Data;
                await characterGrid.Refresh();

                StateHasChanged();
                await Task.Delay(5000);
                responseMsg = string.Empty;
                alertCss = string.Empty;
                StateHasChanged();

            }
            if (args.Action == "Edit")
            {
                //logic for edit
                UpdateCharacterDto dto = new UpdateCharacterDto()
                    {
                        Id = args.Data.Id,
                        ItemLevel = args.Data.ItemLevel,
                        MainSpecId = args.Data.MainSpec.Id
                    };

                var result = await CharacterService.UpdateCharacter(dto);
                var getCharsResponse = await CharacterService.GetUserCharacters();
                if (!result.Success)
                {
                    responseMsg = result.Message;
                    alertCss = "alert-danger";

                    Characters = getCharsResponse.Data;
                    await characterGrid.Refresh();

                    StateHasChanged();
                    await Task.Delay(5000);
                    responseMsg = string.Empty;
                    alertCss = string.Empty;
                    StateHasChanged();

                    return;
                }

                Characters = getCharsResponse.Data;
                await characterGrid.Refresh();
                responseMsg = "Characted updated.";
                alertCss = "alert-success";

                StateHasChanged();
                await Task.Delay(5000);
                responseMsg = string.Empty;
                alertCss = string.Empty;
                StateHasChanged();

            }
        }
        if (args.RequestType.Equals(Syncfusion.Blazor.Grids.Action.Delete))
        {
            //logic for delete
            var result = await CharacterService.DeleteCharacter(args.Data.Id);
            var getCharsResponse = await CharacterService.GetUserCharacters();
            if (!result.Success)
            {
                responseMsg = result.Message;
                alertCss = "alert-danger";

                Characters = getCharsResponse.Data;
                await characterGrid.Refresh();

                StateHasChanged();
                await Task.Delay(5000);
                responseMsg = string.Empty;
                alertCss = string.Empty;
                StateHasChanged();

                return;
            }

            Characters = getCharsResponse.Data;
            await characterGrid.Refresh();
            responseMsg = result.Message;
            alertCss = "alert-success";

            StateHasChanged();
            await Task.Delay(5000);
            responseMsg = string.Empty;
            alertCss = string.Empty;
            StateHasChanged();

        }
    }

}