@inject IRaidEventService _raidEventService
@inject INotificationHelper _notificationHelper

<div class="container w-100 mt-3">

        <table class="table table-striped table-bordered table-hover table-dark">
            <thead class="table-primary">
                <tr>
                    <th scope="col"></th>
                    <th scope="col">Location</th>
                    <th scope="col">Start date</th>
                    <th scope="col">Difficulty</th>
                    <th scope="col">Leader</th>
                    <th scope="col">Status</th>
                    <th scope="col"></th>

                </tr>
            </thead>
            <tbody>
            @foreach (var raid in RaidEvents)
            {

                        <tr class="text-white">
                            <td width="50px"><img class="img-fluid" src="/img/@raid.RaidLocation.ImageUrl" alt="img" /></td>
                            <td>@raid.RaidLocation.Name</td>
                            <td>@raid.StartDate.ToString("yyyy-MM-dd HH:mm")</td>
                            <td>@raid.RaidDifficulty</td>
                            <td>@raid.LeaderName</td>
                            <td>@raid.Status</td>
                            <td>
                                <NavLink href="@($"raid-events/{raid.Id}")" class="btn-primary btn">Details</NavLink>
                            </td>
                        </tr>
            }

            </tbody>

        </table>

        
    </div>

@code {
    List<RaidEventDto> RaidEvents { get; set; } = new();

    protected override async Task OnInitializedAsync()
    {
        var sieveModel = new SieveModel
        {
                Page = 1,
                PageSize = 4,
                Filters = "StartDate > " + DateTime.Now.ToString("yyyy-MM-ddTHH:mm:ss"),
                Sorts ="StartDate"
        };

        var pagedResults = await _raidEventService.GetPagedRaidEvents(sieveModel);
        if (!pagedResults.Success)
        {
            await _notificationHelper.ShowErrorNotification(pagedResults.Message);
            return;
        }

        RaidEvents = pagedResults.Data;

    }
}
