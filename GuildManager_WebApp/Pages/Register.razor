@page "/register"
@layout LoginLayout
@inject IAuthService AuthService
@using Blazored.FluentValidation;
<PageTitle>Register</PageTitle>

<EditForm Model="user" OnValidSubmit="HandleRegistration">
    <DataAnnotationsValidator></DataAnnotationsValidator>
    <p class="text-white-50 mb-5">Please enter your registration data.</p>
    <div class="mb-3">
        <label for="email">Email</label>
        <InputText id="email" @bind-Value="user.Email" class="form-control" />
        <ValidationMessage For="@(()=>user.Email)" />
    </div>
    <div class="mb-3">
        <label for="nickname">Nickname</label>
        <InputText id="email" @bind-Value="user.Nickname" class="form-control" />
        <ValidationMessage For="@(()=>user.Nickname)" />
    </div>
    <div class="mb-3">
        <label for="password">Password</label>
        <InputText id="email" @bind-Value="user.Password" class="form-control" type="password" />
        <ValidationMessage For="@(()=>user.Password)" />
    </div>
    <div class="mb-3">
        <label for="confirmPassword">Confirm Password</label>
        <InputText id="email" @bind-Value="user.ConfirmPassword" class="form-control" type="password" />
        <ValidationMessage For="@(()=>user.ConfirmPassword)" />
    </div>
    <button type="submit" class="btn btn-primary">Register</button>
    <div>
        <p class="mb-0 mt-3">
            <NavLink href="login" class="text-white-50 fw-bold">Back to Login</NavLink>
        </p>
    </div>
    <div class="@messageCss">
        <span>@message</span>
    </div>
    

</EditForm>

@code {
        RegisterUserDto user = new RegisterUserDto();
        string message = string.Empty;
        string messageCss = string.Empty;

        async void HandleRegistration()
        {
            var result = await AuthService.RegisterUser(user);
            message = result.Message;
            if (!result.Success)
                messageCss = "text-danger";
            else messageCss = "text-success";
        }
}
