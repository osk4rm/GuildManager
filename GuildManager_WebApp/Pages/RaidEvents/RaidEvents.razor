@page "/raid-events"
@using Microsoft.AspNetCore.Components.Web.Infrastructure
@inject AuthenticationStateProvider _authStateProvider;
@inject IRaidEventService _raidEventService;
@inject IExpansionsLocationsService _locService;
@using System.Security.Claims;

<h3 class="mt-2">Raid events</h3>
@if (IsLoading)
{
    <div class="lds-ellipsis"><div></div><div></div><div></div><div></div></div>
}
else
{
    <div class="row mt-5">
        <div class="col-2">
            <button class="btn btn-primary" @onclick="@OpenAddDialog">Add new event!</button>
        </div>
        <div class="col-2">
            <p>Expansion</p>
            <select id="RaidExpansionId" class="form-select" @onchange="ExpansionSelected" >
                <option value=""></option>
                @foreach (var exp in raidExpansions)
                {
                    <option value="@exp.Id">@exp.Name</option>
                }
            </select>
        </div>
        <div class="col-4">

        </div>
    </div>
    
    
    <div class="container w-100 mt-2">
        
        <table class="table table-striped table-bordered table-hover table-dark">
            <thead class="table-primary">
                <tr>
                    <th scope="col"></th>
                    <th scope="col">Location</th>
                    <th scope="col">Start date</th>
                    <th scope="col">Difficulty</th>
                    <th scope="col">Leader</th>
                    <th scope="col">Status</th>
                    <th scope="col"></th>

                </tr>
            </thead>
            <tbody>
                @foreach (var raid in _raidEvents)
                {

                    <tr class="@(raid.LeaderId != UserId ? "text-white" : "text-success")">
                        <td width="50px"><img class="img-fluid" src="/img/@raid.RaidLocation.ImageUrl" alt="img" /></td>
                        <td>@raid.RaidLocation.Name</td>
                        <td>@raid.StartDate.ToString("yyyy-MM-dd HH:mm")</td>
                        <td>@raid.RaidDifficulty</td>
                        <td>@raid.LeaderName</td>
                        <td>@raid.Status</td>
                        <td>
                            <button class="btn btn-primary p">Details</button>
                            @if (IsOwnRaid(raid))
                            {
                                <button class="btn btn-info" @onclick="()=>OpenUpdateDialog(raid)"><i class="fa-solid fa-pen-to-square"></i></button>
                                <button class="btn btn-danger" @onclick="()=>OpenDeleteDialog(raid.Id)">
                                    <i class=" fa-solid fa-xmark"></i>

                                </button>
                            }
                        </td>
                    </tr>
                }

            </tbody>

        </table>

        <div class="mt-2">
            <p class="alert @alertCss">@responseMsg</p>
        </div>
    </div>
    @if (DeleteDialogOpen)
    {
        <ConfirmationDialog Title="Are you sure?" Text="Do you really want to delete your raid event?" DialogType="ConfirmationDialog.ModalDialogType.DeleteCancel"
                    OnClose="@OnDeleteDialogClose"></ConfirmationDialog>
    }
    @if (AddDialogOpen)
    {
        <AddEventModal OnCancel="@OnAddDialogClose" OnAdd="@AddRaidEvent"
               Operation="AddEventModal.ModalOperation.Create"></AddEventModal>
    }
    @if (UpdateDialogOpen)
    {
        <AddEventModal Operation="AddEventModal.ModalOperation.Update"
               OnCancel="@OnUpdateDialogClose" OnUpdate="@UpdateRaidEvent" UpsertRaidEventDto="RaidToUpdate"></AddEventModal>
    }
}
@code {
    protected Task<AuthenticationState> AuthStat { get; set; }
    protected ClaimsPrincipal User { get; set; }
    protected int UserId => int.Parse(User.FindFirst(c => c.Type == ClaimTypes.NameIdentifier).Value);
    public List<RaidEventDto> _raidEvents { get; set; } = new();
    public bool IsLoading { get; set; } = false;
    private string alertCss { get; set; } = string.Empty;
    private string responseMsg { get; set; } = string.Empty;
    private string ownRaidCss { get; set; } = string.Empty;
    public bool DeleteDialogOpen { get; set; } = false;
    public bool AddDialogOpen { get; set; } = false;
    public bool UpdateDialogOpen { get; set; } = false;
    private int _raidEventToDelete;
    private int _raidEventToUpdate;
    public UpsertRaidEventDto RaidToUpdate { get; set; } = new();
    public int selectedExpansion { get; set; }
    public List<RaidExpansionDto> raidExpansions { get; set; } = new();

    private bool IsOwnRaid(RaidEventDto dto)
    {
        if (dto.LeaderId == UserId)
        {
            return true;
        }
        return false;
    }

    protected override async Task OnInitializedAsync()
    {
        IsLoading = true;
        AuthStat = _authStateProvider.GetAuthenticationStateAsync();
        User = (await AuthStat).User;

        await LoadData();

        IsLoading = false;
    }
    private void OnFailedCall(string message)
    {
        alertCss = "alert-danger";
        responseMsg = message;
        StateHasChanged();
    }

    private async Task OnSuccessCall(string message)
    {
        responseMsg = message;
        alertCss = "alert-success";

        await LoadData();

        StateHasChanged();
        await Task.Delay(5000);
        responseMsg = string.Empty;
        alertCss = string.Empty;
        StateHasChanged();
    }
    private async Task OnDeleteDialogClose(bool accepted)
    {
        DeleteDialogOpen = false;
        if (accepted)
        {
            var isDeleted = await _raidEventService.DeleteRaidEvent(_raidEventToDelete);
            if (!isDeleted.Success)
            {
                OnFailedCall(isDeleted.Message);
            }

            await LoadData();
            DeleteDialogOpen = false;
            StateHasChanged();
        }
    }

    private void OpenDeleteDialog(int raidEventId)
    {
        _raidEventToDelete = raidEventId;
        DeleteDialogOpen = true;
        StateHasChanged();
    }

    private async Task LoadData()
    {
        var getAllResult = await _raidEventService.GetAll();
        if (!getAllResult.Success)
        {
            //todo error handling
            return;
        }
        var expResult = await _locService.GetAllExpansions();
        _raidEvents = getAllResult.Data;
        raidExpansions = expResult.Data;

    }

    private void OpenAddDialog()
    {
        AddDialogOpen = true;
        StateHasChanged();
    }

    private void OnAddDialogClose()
    {
        AddDialogOpen = false;
        StateHasChanged();
    }

    private async Task AddRaidEvent(UpsertRaidEventDto dto)
    {
        var result = await _raidEventService.CreateRaidEvent(dto);
        if (!result.Success)
        {
            OnFailedCall(result.Message);
        }
        AddDialogOpen = false;
        await OnSuccessCall(result.Message);

    }
    private void OnUpdateDialogClose()
    {
        UpdateDialogOpen = false;
        StateHasChanged();
    }
    private void OpenUpdateDialog(RaidEventDto raidEvent)
    {
        _raidEventToUpdate = raidEvent.Id;
        RaidToUpdate = new UpsertRaidEventDto
        {
            RaidLocationId = raidEvent.RaidLocation.Id,
            StartDate = raidEvent.StartDate,
            EndDate = raidEvent.EndDate,
            Description = raidEvent.Description,
            AutoAccept = raidEvent.AutoAccept,
            RaidDifficulty = raidEvent.RaidDifficulty,
            Status = raidEvent.Status

        };
        UpdateDialogOpen = true;
        StateHasChanged();
    }
    private async Task UpdateRaidEvent(UpsertRaidEventDto dto)
    {
        var result = await _raidEventService.UpdateRaidEvent(dto, _raidEventToUpdate);
        UpdateDialogOpen = false;
        if (!result.Success)
        {
            OnFailedCall(result.Message);

        }

        await OnSuccessCall(result.Message);

    }

    private async void ExpansionSelected(Microsoft.AspNetCore.Components.ChangeEventArgs e)
    {
        await LoadData();
        if (!string.IsNullOrEmpty(e.Value.ToString()))
        {
            selectedExpansion = int.Parse(e.Value.ToString());
            

            _raidEvents = _raidEvents
            .Where(r => r.RaidLocation.ExpansionId == selectedExpansion)
            .ToList();
        }
        

        StateHasChanged();
    }
}
