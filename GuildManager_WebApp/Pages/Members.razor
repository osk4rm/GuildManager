@page "/members"
@using GuildManager_Models.Members;
@inject IMembersService _membersService
@inject IRaidEventService _raidEventService
@using Microsoft.AspNetCore.Components.WebAssembly.Services

<h3 mt-2>Guild members</h3>

@if (IsLoading)
{
    <div class="lds-ellipsis"><div></div><div></div><div></div><div></div></div>
}
else
{

    <div class="col-lg-12 control-section mt-5">
        <div class="content-wrapper">
            <div class="row">
                <SfGrid DataSource="@MembersList" AllowFiltering="true" AllowPaging="true">
                    <GridFilterSettings Type="Syncfusion.Blazor.Grids.FilterType.Menu"></GridFilterSettings>
                    <GridTemplates>
                        <DetailTemplate>
                            @{
                                var member = (context as MemberDto);
                            }
                            <div style="padding:20px">
                                <SfTab Width="800">
                                    <TabItems>
                                        <TabItem>
                                            <ChildContent>
                                                <TabHeader Text="Characters"></TabHeader>
                                            </ChildContent>
                                            <ContentTemplate>
                                                <div style="container w-75 padding:25px">
                                                    <SfGrid DataSource="@member.Characters" AllowPaging="true">
                                                        <GridPageSettings PageSize="10"></GridPageSettings>
                                                        <GridColumns>
                                                            <GridColumn Field=@nameof(CharacterDto.Name) HeaderText="Name"> </GridColumn>
                                                            <GridColumn Field="Class.Name" HeaderText="Class"></GridColumn>
                                                            <GridColumn Field="MainSpec.Name" HeaderText="Mainspec" Format="C2"></GridColumn>
                                                            <GridColumn Field=@nameof(CharacterDto.ItemLevel) HeaderText="Item level"></GridColumn>
                                                        </GridColumns>
                                                    </SfGrid>
                                                </div>
                                            </ContentTemplate>
                                        </TabItem>
                                        <TabItem>
                                            <ChildContent>
                                                <TabHeader Text="Raid events"></TabHeader>
                                            </ChildContent>
                                            <ContentTemplate>
                                                <SfGrid DataSource="@member.RaidEvents" AllowPaging="true">
                                                    <GridPageSettings PageSize="10"></GridPageSettings>
                                                    <GridColumns>
                                                        <GridColumn Field=RaidLocation.Name HeaderText="Location"> </GridColumn>
                                                        <GridColumn Field="@nameof(RaidEventDto.StartDate)" HeaderText="Date"></GridColumn>
                                                        <GridColumn Field="@nameof(RaidEventDto.RaidDifficulty)" HeaderText="Difficulty"></GridColumn>
                                                        <GridColumn Field=@nameof(RaidEventDto.Status) HeaderText="Status"></GridColumn>
                                                    </GridColumns>
                                                </SfGrid>
                                            </ContentTemplate>
                                        </TabItem>
                                    </TabItems>
                                </SfTab>
                            </div>
                        </DetailTemplate>
                    </GridTemplates>
                    <GridColumns>
                        <GridColumn Field=@nameof(MemberDto.Nickname) HeaderText="Nickname" Width="110">
                            <HeaderTemplate>
                                <span class="header-text">
                                    <i class="fa-solid fa-user"></i>
                                    Member
                                </span>
                            </HeaderTemplate>
                            <Template>
                                @{
                                    var member = (context as MemberDto);
                                    <div>
                                        <img class="rounded-circle shadow-1-strong me-3"
                                         src="data:@ImageConverter.GetMimeType(member.Avatar);base64,@Convert.ToBase64String(member.Avatar)" alt="avatar" width="40"
                                         height="40" />
                                        <span id="Emptext">@member.Nickname</span>
                                    </div>
                                }
                            </Template>
                        </GridColumn>
                        <GridColumn Field=@nameof(MemberDto.Rank) HeaderText="Rank" Width="110">
                            <HeaderTemplate>
                                <span class="header-text">
                                    <i class="fa-solid fa-star"></i>
                                    Rank
                                </span>
                            </HeaderTemplate>
                        </GridColumn>
                    </GridColumns>
                </SfGrid>
            </div>
        </div>
    </div>

}
@code {
    List<MemberDto> MembersList { get; set; } = new();
    List<RaidEventDto> MemberRaidEvents { get; set; } = new();
    private bool IsLoading { get; set; } = false;

    protected override async Task OnInitializedAsync()
    {
        IsLoading = true;
        var membersResponse = await _membersService.GetMembers();
        if (!membersResponse.Success)
        {
            //logic for unsuccessful try
        }
        MembersList = membersResponse.Data;
        MemberRaidEvents = await GetRaidEventsForMember(1);

        IsLoading = false;
    }

    private async Task<List<RaidEventDto>> GetRaidEventsForMember(int memberId)
    {
        var res = await _raidEventService.GetAll();

        if (!res.Success)
        {
            //woops, error with getevents call
            return new List<RaidEventDto>();
        }

        return res.Data;

    }
}
