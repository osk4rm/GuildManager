@page "/raid-events/{RaidEventId:int}"
@inject IRaidEventService _raidEventService
@inject ICharacterService _characterService
@inject AuthenticationStateProvider _authStateProvider;

@if (IsLoading)
{
    <div class="lds-ellipsis"><div></div><div></div><div></div><div></div></div>
}
else
{
    <div class="container">

        <div class="d-flex flex-row justify-content-end">

            <button class="btn btn-outline-success mt-2 me-2" @onclick="OpenJoinEventModal">Join this event!</button>
            <NavLink class="btn btn-primary mt-2" href="raid-events">Back to list</NavLink>
        </div>

        <div class="row mt-2 justify-content-center">
            <div class="col-4 raid-details">
                <div class="card h-100 text-white bg-black">
                    <div class="card-body">
                        <p>Location: @RaidEvent.RaidLocation.Name</p>
                        <p>Difficulty: @RaidEvent.RaidDifficulty</p>
                        <p>Leader: @RaidEvent.LeaderName</p>

                    </div>
                </div>
            </div>
            <div class="col-4 raid-details">
                <div class="card h-100 text-white bg-dark">
                    <div class="card-body">
                        <p>Start: @RaidEvent.StartDate</p>
                        <p>Finish: @RaidEvent.EndDate</p>
                        <p>Status: @RaidEvent.Status</p>

                    </div>
                </div>
            </div>
            <div class="col-4 raid-details">
                <div class="card h-100 text-white bg-secondary">
                    <div class="card-header">Description</div>
                    <div class="card-body">
                        <p class="card-text">@RaidEvent.Description</p>
                    </div>
                </div>
            </div>
            <CascadingValue Value="User" Name="User">
                <CascadingValue Value="UserId" Name="UserId">
                    <CascadingValue Value="RaidEvent" Name="RaidEvent">
                        <div class="row mt-2 justify-content-center">
                            <div class="col-6">
                                <ParticipantsTable Participants="Participants" CharacterStatusUpdated="LoadData"></ParticipantsTable>
                            </div>
                            <div class="col-6">

                                <CommentsComponent></CommentsComponent>

                            </div>
                        </div>
                    </CascadingValue>
                </CascadingValue>
            </CascadingValue>
            <div class="alert @alertCss mt-2">@alertMessage</div>
        </div>
    </div>

    @if (joinModalVisible)
    {
        <JoinEventModal UserCharacters="UserCharacters" OnAdd="OnJoinEventModalConfirmed" OnCancel="OnJoinEventModalClosed"></JoinEventModal>
    }


}


@code {
    [Parameter]
    public int RaidEventId { get; set; }
    public RaidEventDto RaidEvent { get; set; } = new();
    public List<RaidEventCharacterDto> Participants = new();
    private bool IsLoading { get; set; } = false;
    protected Task<AuthenticationState> AuthStat { get; set; }
    protected ClaimsPrincipal User { get; set; }
    public List<CharacterDto> UserCharacters { get; set; } = new();
    protected int UserId => int.Parse(User.FindFirst(c => c.Type == ClaimTypes.NameIdentifier).Value);
    private bool joinModalVisible = false;
    private string alertCss = string.Empty;
    private string alertMessage = string.Empty;

    protected override async Task OnInitializedAsync()
    {
        IsLoading = true;
        AuthStat = _authStateProvider.GetAuthenticationStateAsync();
        User = (await AuthStat).User;
        await LoadUserCharacters();
        await LoadData();
        IsLoading = false;
    }

    private async Task LoadData()
    {
        var eventResult = await _raidEventService.GetById(RaidEventId);

        if (!eventResult.Success)
        {
            //todo error handling
        }

        RaidEvent = eventResult.Data;

        var participantsResult = await _raidEventService.GetParticipants(RaidEventId);

        if (!participantsResult.Success)
        {
            //todo error handling
        }

        Participants = participantsResult.Data;
    }

    private async Task LoadUserCharacters()
    {
        var userCharactersResult = await _characterService.GetUserCharacters();

        if (!userCharactersResult.Success)
        {
            //todo error handling
        }

        UserCharacters = userCharactersResult.Data;
    }

    private async Task OnJoinEventModalClosed()
    {
        joinModalVisible = false;
        StateHasChanged();
    }

    private async Task OnJoinEventModalConfirmed(int characterId)
    {
        var joinEventResult = await _raidEventService.JoinRaidEvent(RaidEventId, characterId);
        if (!joinEventResult.Success)
        {
            OnFailedCall(joinEventResult.Message);
        }
        await LoadData();
        joinModalVisible = false;
        StateHasChanged();
    }

    private async Task OpenJoinEventModal()
    {
        joinModalVisible = true;
        StateHasChanged();
    }

    private async Task OnFailedCall(string message)
    {
        alertCss = "alert-danger";
        alertMessage = message;
        StateHasChanged();
        await Task.Delay(5000);
        alertMessage = string.Empty;
        alertCss = string.Empty;
        StateHasChanged();
    }

    private async Task OnSuccessCall(string message)
    {
        alertMessage = message;
        alertCss = "alert-success";

        await LoadData();

        StateHasChanged();
        await Task.Delay(5000);
        alertMessage = string.Empty;
        alertCss = string.Empty;
        StateHasChanged();
    }
}
